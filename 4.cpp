#include <iostream>      //  для ввода-вывода
#include <cmath>        // для математических функций
#include <limits>       // для получения лимитов типов данных
#include <regex>        //  для работы с регулярными выражениями

// Определяем класс Point для работы с точками на плоскости
class Point {
private:
    double x; // Координата x точки
    double y; // Координата y точки

public:
    // Конструктор по умолчанию, инициирует координаты (0, 0)
    Point() : x(0), y(0) {}

    // Конструктор с параметрами, принимает координаты x и y
    Point(double x, double y) : x(x), y(y) {
        // Проверяем, корректны ли введённые координаты
        if (!isValidCoordinate(x) || !isValidCoordinate(y)) {
            throw std::invalid_argument("Координаты должны быть вещественными числами."); // Генерируем исключение в случае некорректного ввода
        }
    }

    // Конструктор копирования, копирует значение другой точки
    Point(const Point &p) : x(p.x), y(p.y) {}

    // Метод для вычисления расстояния до начала координат
    double distanceToOrigin() const {
        return std::sqrt(x * x + y * y); // Используем теорему Пифагора
    }

    // Перегрузка оператора вывода для отображения точки
    friend std::ostream& operator<<(std::ostream& os, const Point& p) {
        os << "Point(" << p.x << ", " << p.y << ")"; // Форматируем строку вывода
        return os; // Возвращаем объект потока
    }

    // Унарная операция уменьшения координат на 1
    Point operator--() {
        --x; // Уменьшаем координату x на 1
        --y; // Уменьшаем координату y на 1
        return *this; // Возвращаем изменённый объект
    }

    // Метод для смены местами координат x и y
    void swapCoords() {
        std::swap(x, y); // Используем стандартный метод swap для обмена значениями
    }

    // Приведение типа к int (возвращает целую часть координаты x)
    operator int() const {
        return static_cast<int>(x); // Приводим координату x к типу int
    }

    // Явное приведение типа к double (возвращает значение координаты y)
    explicit operator double() const {
        return y; // Возвращаем значение координаты y
    }

    // Бинарная операция: уменьшение координаты x на целое число
    Point operator-(int value) const {
        return Point(x - value, y); // Возвращаем новую точку с уменьшенной координатой x
    }

    // Метод для вычисления расстояния до другой точки
    double distanceTo(const Point& p) const {
        return std::sqrt((x - p.x) * (x - p.x) + (y - p.y) * (y - p.y)); // Расчет расстояния между двумя точками
    }

private:
    // Проверка корректности координат
    static bool isValidCoordinate(double value) {
        return std::isfinite(value); // Проверяем, является ли значение конечным
    }
};

// Функция проверки, является ли строка вещественным числом
bool isFloat(const std::string& str) {
    std::regex float_regex("^-?\\d+\\.\\d+$"); // Регулярное выражение для проверки формата вещественного числа
    return std::regex_match(str, float_regex); // Проверяем строку на соответствие шаблону
}

int main() {
    std::string x_str, y_str; // Для хранения введенных координат в строковом формате
    double x, y; // Действительные координаты

    // Запрос координаты x у пользователя с проверкой ввода
    std::cout << "Введите координату x : ";
    while (true) {
        std::cin >> x_str; // Считываем строку
        if (isFloat(x_str)) { // Проверяем, является ли строка вещественным числом
            x = std::stod(x_str); // Преобразуем строку в значение типа double
            break; // Выходим из цикла при корректном вводе
        } else {
            std::cout << "Ошибка ввода! Пожалуйста, введите вещественное число для x: "; // Сообщаем об ошибке
        }
    }

    // Запрос координаты y у пользователя с проверкой ввода
    std::cout << "Введите координату y : ";
    while (true) {
        std::cin >> y_str; // Считываем строку
        if (isFloat(y_str)) { // Проверяем, является ли строка вещественным числом
            y = std::stod(y_str); // Преобразуем строку в значение типа double
            break; // Выходим из цикла при корректном вводе
        } else {
            std::cout << "Ошибка ввода! Пожалуйста, введите вещественное число для y: "; // Сообщаем об ошибке
        }
    }

    // Создание объекта Point с введенными координатами
    Point p(x, y);
    int choice; // Для хранения выбора меню

    do {
        // Выводим меню доступных операций
        std::cout << "\nМеню:\n";
        std::cout << "1. Вывод текущей точки\n";
        std::cout << "2. Расстояние от точки до начала координат\n";
        std::cout << "3. Уменьшение координат на 1\n";
        std::cout << "4. Смена координат местами\n";
        std::cout << "5. Уменьшить координату x на целое число\n";
        std::cout << "6. Расчет расстояния до другой точки\n";
        std::cout << "7. Приведение типа int (координата x)\n";
        std::cout << "8. Приведение типа double (координата y)\n";
        std::cout << "0. Выход\n";
        std::cout << "Выберите операцию:\n ";
        std::cin >> choice; // Считываем выбор пользователя

        // Обрабатываем выбор пользователя с помощью switch
        switch (choice) {
            case 1:
                std::cout << "Текущая точка: " << p << std::endl; // Выводить текущую точку
                break;
            case 2:
                std::cout << "Расстояние от точки до начала координат: " << p.distanceToOrigin() << std::endl; // Вычисление расстояния до начала
                break;
            case 3:
                --p; // Уменьшаем координаты на 1
                std::cout << "После уменьшения координат: " << p << std::endl; // Выводим изменённую точку
                break;
            case 4:
                p.swapCoords(); // Меняем местами координаты
                std::cout << "После смены координат местами: " << p << std::endl; // Выводим изменённую точку
                break;
            case 5: {
                int decreaseValue; // Переменная для хранения значения уменьшения
                std::cout << "Введите целое число для уменьшения координаты x: "; // Запрос на ввод
                while (!(std::cin >> decreaseValue)) { // Проверяем ввод
                    std::cin.clear(); // Очищаем состояние потока в случае ошибки
                    std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n'); // Игнорируем некорректный ввод
                    std::cout << "Ошибка ввода! Пожалуйста, введите целое число: "; // Сообщаем об ошибке
                }
                Point p2 = p - decreaseValue; // Создаем новую точку с уменьшенной координатой x
                std::cout << "После уменьшения x на " << decreaseValue << ": " << p2 << std::endl; // Вывод изменённой точки
                break;
            }
            case 6: {
                double x2, y2; // Переменные для других координат
                // Запросы на ввод координат второй точки
                std::cout << "Введите координату x для второй точки: ";
                while (!(std::cin >> x2)) { // Проверяем ввод
                    std::cin.clear(); // Очищаем состояние потока в случае ошибки
                    std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n'); // Игнорируем некорректный ввод
                    std::cout << "Ошибка ввода! Пожалуйста, введите вещественное число для x: "; 
                }

                std::cout << "Введите координату y для второй точки: ";
                while (!(std::cin >> y2)) { // Проверяем ввод
                    std::cin.clear(); // Очищаем состояние потока в случае ошибки
                    std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n'); // Игнорируем некорректный ввод
                    std::cout << "Ошибка ввода! Пожалуйста, введите вещественное число для y: "; 
                }

                Point p3(x2, y2); // Создаём другую точку
                std::cout << "Расстояние от первой точки до второй: " << p.distanceTo(p3) << std::endl; // Выводим расстояние между двумя точками
                break;
            }
            case 7: // Приведение к int
                std::cout << "Целая часть координаты x: " << static_cast<int>(p) << std::endl; // Вывод целой части x
                break;
            case 8: // Приведение к double
                std::cout << "Значение координаты y: " << static_cast<double>(p) << std::endl; // Вывод значения y
                break;
            case 0:
                std::cout << "Выход из программы." << std::endl; 
                break;
            default:
                std::cout << "Некорректный выбор, пожалуйста, попробуйте снова." << std::endl; 
                break;
        }
    } while (choice != 0); // Продолжаем до тех пор, пока пользователь не выберет выход

    return 0; 
}
